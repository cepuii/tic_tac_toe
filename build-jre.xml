<project name="Build JRE for tic-tac-toe game" default="build-jre" basedir=".">

  <!-- ******************************* SCRIPT CONFIGS ******************************* -->
  <!-- JPMS modules -->
  <property name="java.modules"
    value="java.base"/>

  <!-- Target directories -->
  <property name="target-tmp-dir"
    value=".tmp"/>
  <property name="jre-windows-dir-name"
    value="jre-wind"/>
  <property name="jre-linux-dir-name"
    value="jre-unix"/>

  <!-- JDK download links -->
  <property name="jdk-windows-download-link"
    value="https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_windows-x64_bin.zip"/>
  <property name="jdk-linux-download-link"
    value="https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz"/>

  <property environment="env"/>

  <!-- *************************************** TARGETS *************************************** -->
  <target name="build-jre"
    depends="build-windows-jre, build-linux-jre"/>

  <target name="init">
    <mkdir dir="${target-tmp-dir}"/>
    <mkdir dir="${target-tmp-dir}/jdk"/>
  </target>

  <!-- *********************************** FOR WINDOWS PLATFORM *********************************** -->
  <condition property="isCurrentWindows">
    <os family="windows"/>
  </condition>

  <condition property="isWindowsJreBuilt">
    <available file="${target-tmp-dir}/${jre-windows-dir-name}/bin/java.exe"/>
  </condition>

  <target name="build-windows-jre" depends="init" unless="isWindowsJreBuilt">
    <antcall target="build-windows-jre-if-windows"/>
    <antcall target="build-windows-jre-if-not-windows"/>
  </target>

  <target name="build-windows-jre-if-windows" if="isCurrentWindows">
    <build-jre modulePath="${env.JAVA_HOME}/jmods/" destDir="jre-wind"/>
  </target>

  <target name="build-windows-jre-if-not-windows" unless="isCurrentWindows">
    <antcall target="download-windows-jdk"/>
    <build-jre modulePath="${target-tmp-dir}/jdk/jdk-windows/jdk-17.0.2/jmods"
      destDir="jre-windows"/>
  </target>

  <target name="download-windows-jdk">
    <echo level="info"
      message="Download JDK using '${jdk-windows-download-link}' link"/>
    <get src="${jdk-windows-download-link}" dest="${target-tmp-dir}/jdk/jdk-windows.zip"
      skipexisting="true"/>
    <unzip src="${target-tmp-dir}/jdk/jdk-windows.zip" dest="${target-tmp-dir}/jdk/jdk-windows"/>
  </target>

  <!-- *********************************** FOR LINUX PLATFORM *********************************** -->
  <condition property="isCurrentLinux">
    <and>
      <os family="unix"/>
      <not>
        <os family="macos"/>
      </not>
    </and>
  </condition>

  <condition property="isLinuxJreBuilt">
    <available file="${target-tmp-dir}/${jre-linux-dir-name}/bin/java"/>
  </condition>

  <target name="build-linux-jre" depends="init" unless="isLinuxJreBuilt">
    <antcall target="build-linux-jre-if-linux"/>
    <antcall target="build-linux-jre-if-not-linux"/>
  </target>

  <target name="build-linux-jre-if-linux" if="isCurrentLinux">
    <build-jre modulePath="${env.JAVA_HOME}/jmods/" destDir="${jre-linux-dir-name}"/>
  </target>

  <target name="build-linux-jre-if-not-linux" unless="isCurrentLinux">
    <antcall target="download-linux-jdk"/>
    <build-jre modulePath="${target-tmp-dir}/jdk/jdk-linux/jdk-17.0.2/jmods"
      destDir="${jre-linux-dir-name}"/>
  </target>

  <target name="download-linux-jdk">
    <echo level="info"
      message="Download JDK using '${jdk-linux-download-link}' link"/>
    <get src="${jdk-linux-download-link}" dest="${target-tmp-dir}/jdk/jdk-linux.tar.gz"
      skipexisting="true"/>
    <untar src="${target-tmp-dir}/jdk/jdk-linux.tar.gz" dest="${target-tmp-dir}/jdk/jdk-linux"
      compression="gzip"/>
  </target>

  <!-- ********************************* MACRO DEFINITIONS ************************************* -->
  <macrodef name="build-jre">
    <attribute name="destDir"/>
    <attribute name="modulePath"/>
    <sequential>
      <echo level="info"
        message="Build JRE using '@{modulePath}' module path into '${target-tmp-dir}/@{destDir}' directory"/>
      <exec executable="${env.JAVA_HOME}/bin/jlink" failonerror="true">
        <arg line='--add-modules "${java.modules}"'/>
        <arg line='--module-path "@{modulePath}"'/>
        <arg line='--output ${target-tmp-dir}/@{destDir}'/>
        <arg line='--no-header-files --no-man-pages --compress 2'/>
      </exec>
    </sequential>
  </macrodef>
</project>